# Docker Compose - Self-Hosted Cortex DC Platform
# Replaces Firebase with containerized alternatives

version: '3.9'

services:
  # ======================
  # Database: PostgreSQL
  # ======================
  postgres:
    image: postgres:16-alpine
    container_name: cortex-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: cortex
      POSTGRES_USER: cortex
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-cortex_secure_password}
      # Keycloak database
      POSTGRES_MULTIPLE_DATABASES: keycloak
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sh:/docker-entrypoint-initdb.d/init-postgres.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cortex -d cortex"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cortex-network

  # ======================
  # Authentication: Keycloak
  # ======================
  keycloak:
    image: quay.io/keycloak/keycloak:23.0.3
    container_name: cortex-keycloak
    restart: unless-stopped
    command:
      - start-dev
    environment:
      # Database
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: cortex
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD:-cortex_secure_password}

      # Admin credentials
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin_password}

      # Hostname configuration
      KC_HOSTNAME: localhost
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
      KC_HTTP_PORT: 8180

      # Proxy configuration
      KC_PROXY: edge
    ports:
      - "8180:8180"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cortex-network
    volumes:
      - keycloak_data:/opt/keycloak/data

  # ======================
  # Object Storage: MinIO
  # ======================
  minio:
    image: minio/minio:RELEASE.2024-01-01T16-36-33Z
    container_name: cortex-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin_password}
      # Create buckets on startup
      MINIO_BROWSER: "on"
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console UI
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - cortex-network

  # MinIO bucket initialization
  minio-init:
    image: minio/mc:latest
    container_name: cortex-minio-init
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 ${MINIO_ROOT_USER:-minioadmin} ${MINIO_ROOT_PASSWORD:-minioadmin_password}) do echo 'Waiting for MinIO...' && sleep 1; done;
      /usr/bin/mc mb minio/cortex-documents || true;
      /usr/bin/mc mb minio/cortex-uploads || true;
      /usr/bin/mc mb minio/cortex-exports || true;
      /usr/bin/mc policy set download minio/cortex-documents;
      /usr/bin/mc policy set download minio/cortex-uploads;
      /usr/bin/mc policy set download minio/cortex-exports;
      echo 'Buckets initialized successfully';
      exit 0;
      "
    networks:
      - cortex-network

  # ======================
  # Cache: Redis
  # ======================
  redis:
    image: redis:7-alpine
    container_name: cortex-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password} --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - cortex-network

  # ======================
  # Message Queue: NATS
  # ======================
  nats:
    image: nats:2.10-alpine
    container_name: cortex-nats
    restart: unless-stopped
    command: "--jetstream --store_dir=/data --http_port=8222"
    ports:
      - "4222:4222"  # Client connections
      - "8222:8222"  # HTTP monitoring
      - "6222:6222"  # Cluster connections
    volumes:
      - nats_data:/data
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - cortex-network

  # ======================
  # API Server (Express)
  # ======================
  # Note: This service requires a Dockerfile to be created
  # Uncomment after implementing packages/api-server
  #
  # api-server:
  #   build:
  #     context: .
  #     dockerfile: packages/api-server/Dockerfile
  #   container_name: cortex-api
  #   restart: unless-stopped
  #   environment:
  #     NODE_ENV: production
  #     PORT: 8080
  #
  #     # Database
  #     DATABASE_URL: postgresql://cortex:${POSTGRES_PASSWORD:-cortex_secure_password}@postgres:5432/cortex
  #
  #     # Keycloak
  #     KEYCLOAK_URL: http://keycloak:8180
  #     KEYCLOAK_REALM: cortex
  #     KEYCLOAK_CLIENT_ID: cortex-api
  #     KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
  #
  #     # MinIO
  #     MINIO_ENDPOINT: minio
  #     MINIO_PORT: 9000
  #     MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
  #     MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin_password}
  #     MINIO_USE_SSL: false
  #
  #     # Redis
  #     REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379
  #
  #     # NATS
  #     NATS_URL: nats://nats:4222
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     minio:
  #       condition: service_healthy
  #     nats:
  #       condition: service_healthy
  #   networks:
  #     - cortex-network

  # ======================
  # Frontend (Next.js)
  # ======================
  frontend:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      args:
        NEXT_PUBLIC_API_URL: http://localhost:8080
        NEXT_PUBLIC_DEPLOYMENT_MODE: self-hosted
        NEXT_PUBLIC_KEYCLOAK_URL: http://localhost:8180
        NEXT_PUBLIC_KEYCLOAK_REALM: cortex
        NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: cortex-web
        NEXT_PUBLIC_STORAGE_MODE: minio
        NEXT_PUBLIC_MINIO_ENDPOINT: http://localhost:9000
        NEXT_PUBLIC_MINIO_BUCKET: cortex-storage
        NEXT_PUBLIC_APP_NAME: Cortex DC
        NEXT_PUBLIC_APP_URL: http://localhost:3000
        NEXT_PUBLIC_ENVIRONMENT: production
    container_name: cortex-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DEPLOYMENT_MODE: self-hosted

      # Database
      DATABASE_URL: postgresql://cortex:${POSTGRES_PASSWORD:-cortex_secure_password}@postgres:5432/cortex

      # Keycloak (backend)
      KEYCLOAK_URL: http://keycloak:8180
      KEYCLOAK_REALM: cortex
      KEYCLOAK_CLIENT_ID: cortex-api
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET:-your-client-secret-here}

      # Storage (backend)
      STORAGE_MODE: minio
      MINIO_ENDPOINT: http://minio:9000
      MINIO_BUCKET: cortex-storage
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin_password}
      MINIO_USE_SSL: false

      # Cache & Queue
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379
      NATS_URL: nats://nats:4222

      # Security
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-minimum-32-characters-here}
      SESSION_SECRET: ${SESSION_SECRET:-your-session-secret-minimum-32-characters-here}

      # AI (optional)
      GEMINI_API_KEY: ${GEMINI_API_KEY:-}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_started
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - cortex-network

# ======================
# Volumes
# ======================
volumes:
  postgres_data:
    driver: local
  keycloak_data:
    driver: local
  minio_data:
    driver: local
  redis_data:
    driver: local
  nats_data:
    driver: local

# ======================
# Networks
# ======================
networks:
  cortex-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
