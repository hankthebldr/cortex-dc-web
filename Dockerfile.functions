# Cortex DC Functions - Production Dockerfile
# Cloud Functions / Backend API services
# Target: GKE deployment with Firebase Admin SDK

# ====================
# Stage 1: Dependencies
# ====================
FROM node:22-alpine AS deps
LABEL stage=deps

# Security: Run as non-root user
RUN addgroup --system --gid 1001 functions && \
    adduser --system --uid 1001 functions

# Install system dependencies
RUN apk add --no-cache libc6-compat python3 make g++

WORKDIR /app

# Copy dependency files
COPY functions/package.json functions/package-lock.json ./

# Install dependencies
RUN npm ci --only=production --omit=dev

# ====================
# Stage 2: Builder
# ====================
FROM node:22-alpine AS builder
LABEL stage=builder

WORKDIR /app

# Install build dependencies
RUN apk add --no-cache libc6-compat python3 make g++

# Copy package files
COPY functions/package.json functions/package-lock.json functions/tsconfig.json ./

# Install all dependencies (including dev)
RUN npm ci

# Copy source code
COPY functions/src ./src

# Build TypeScript
RUN npm run build

# ====================
# Stage 3: Runner
# ====================
FROM node:22-alpine AS runner
LABEL maintainer="Henry Reed <henry@henryreed.ai>"
LABEL description="Cortex DC Backend Functions"
LABEL version="0.1.0"

WORKDIR /app

# Security: Create non-root user
RUN addgroup --system --gid 1001 functions && \
    adduser --system --uid 1001 functions && \
    chown -R functions:functions /app

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Copy production dependencies
COPY --from=deps --chown=functions:functions /app/node_modules ./node_modules

# Copy built application
COPY --from=builder --chown=functions:functions /app/lib ./lib
COPY --from=builder --chown=functions:functions /app/package.json ./package.json

# Runtime environment variables
ENV NODE_ENV=production
ENV PORT=8080
ENV GCP_PROJECT=""
ENV FUNCTION_REGION="us-central1"

# Security: Don't run as root
USER functions

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD node -e "require('http').get('http://localhost:8080/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"

# Expose port
EXPOSE 8080

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start application
CMD ["node", "lib/index.js"]
