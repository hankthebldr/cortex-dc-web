name: Docker Build & Push to GCR

on:
  push:
    branches:
      - main
      - develop
      - 'release/**'
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - develop

env:
  GCP_PROJECT_ID: cortex-dc-portal
  GCP_REGION: us-central1
  GKE_CLUSTER: cortex-dc-cluster
  GKE_ZONE: us-central1-a
  IMAGE_TAG: ${{ github.sha }}

jobs:
  # Security scanning and linting
  security-scan:
    name: Security Scan & Lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner (filesystem)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-fs-results.sarif'

      - name: Run Hadolint (Dockerfile linter)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile.web
          failure-threshold: warning

      - name: Run Hadolint for functions
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile.functions
          failure-threshold: warning

      - name: Check for secrets with Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # Build and test
  build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.15.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linters
        run: pnpm run lint

      - name: Run type checks
        run: pnpm run type-check

      - name: Run tests
        run: pnpm run test
        continue-on-error: true

      - name: Build packages
        run: pnpm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1

  # Build and push Docker images
  docker-build-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: build-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/'))
    permissions:
      contents: read
      id-token: write
    strategy:
      matrix:
        service: [web, functions]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker gcr.io

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: gcr.io/${{ env.GCP_PROJECT_ID }}/cortex-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            NEXT_PUBLIC_FIREBASE_API_KEY=${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
            NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
            NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
            NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
            NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
            NEXT_PUBLIC_FIREBASE_APP_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}

      - name: Run Trivy vulnerability scanner (image)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: gcr.io/${{ env.GCP_PROJECT_ID }}/cortex-${{ matrix.service }}:${{ env.IMAGE_TAG }}
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-${{ matrix.service }}-results.sarif'

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: gcr.io/${{ env.GCP_PROJECT_ID }}/cortex-${{ matrix.service }}:${{ env.IMAGE_TAG }}
          format: cyclonedx-json
          output-file: sbom-${{ matrix.service }}.cyclonedx.json

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.service }}
          path: sbom-${{ matrix.service }}.cyclonedx.json

  # Deploy to GKE
  deploy-gke:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      id-token: write
    environment:
      name: production
      url: https://cortex-dc.henryreed.ai
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
            --zone=${{ env.GKE_ZONE }} \
            --project=${{ env.GCP_PROJECT_ID }}

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.14.0'

      - name: Deploy with Helm
        run: |
          helm upgrade --install cortex-dc ./helm/cortex-dc \
            --namespace cortex-dc \
            --create-namespace \
            --set web.image.tag=${{ env.IMAGE_TAG }} \
            --set functions.image.tag=${{ env.IMAGE_TAG }} \
            --set global.environment=production \
            --wait \
            --timeout=10m

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/cortex-dc-web -n cortex-dc --timeout=5m
          kubectl rollout status deployment/cortex-dc-functions -n cortex-dc --timeout=5m

      - name: Run smoke tests
        run: |
          kubectl run curl-test --image=curlimages/curl:latest --rm -i --restart=Never \
            --namespace=cortex-dc \
            -- curl -f http://cortex-dc-web:3000/api/health || exit 1

      - name: Notify Slack on success
        if: success()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "✅ Deployment successful: cortex-dc-web v${{ env.IMAGE_TAG }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Deployment Successful* :white_check_mark:\n*Service:* cortex-dc-web\n*Version:* ${{ env.IMAGE_TAG }}\n*Environment:* Production\n*Commit:* <${{ github.event.head_commit.url }}|${{ github.event.head_commit.message }}>"
                  }
                }
              ]
            }

      - name: Notify Slack on failure
        if: failure()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "❌ Deployment failed: cortex-dc-web v${{ env.IMAGE_TAG }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Deployment Failed* :x:\n*Service:* cortex-dc-web\n*Version:* ${{ env.IMAGE_TAG }}\n*Environment:* Production\n*Check:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Logs>"
                  }
                }
              ]
            }
