name: Functions CI

on:
  pull_request:
    paths:
      - 'functions/**'
      - '.github/workflows/functions-ci.yml'
  push:
    branches:
      - main
      - develop
    paths:
      - 'functions/**'
      - '.github/workflows/functions-ci.yml'

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '8'

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        working-directory: functions
        run: pnpm install --frozen-lockfile

      - name: Run linter
        working-directory: functions
        run: pnpm run lint

      - name: Build TypeScript
        working-directory: functions
        run: pnpm run build

      - name: Check for TypeScript errors
        working-directory: functions
        run: |
          if [ -d "lib" ]; then
            echo "✅ TypeScript build successful"
          else
            echo "❌ TypeScript build failed"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: functions/lib
          retention-days: 7

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        working-directory: functions
        run: |
          docker build \
            --tag functions-microservice:test \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            .

      - name: Test Docker image
        run: |
          # Start container
          docker run -d \
            --name functions-test \
            -p 8080:8080 \
            -e NODE_ENV=production \
            -e GOOGLE_CLOUD_PROJECT=test \
            -e FIREBASE_PROJECT_ID=test \
            functions-microservice:test

          # Wait for container to be ready
          echo "Waiting for container to start..."
          sleep 10

          # Test health endpoint
          max_attempts=30
          attempt=0
          while [ $attempt -lt $max_attempts ]; do
            if curl -f http://localhost:8080/health; then
              echo "✅ Health check passed"
              break
            fi
            attempt=$((attempt + 1))
            echo "Attempt $attempt/$max_attempts failed, retrying..."
            sleep 2
          done

          if [ $attempt -eq $max_attempts ]; then
            echo "❌ Health check failed after $max_attempts attempts"
            docker logs functions-test
            exit 1
          fi

          # Test additional endpoints
          curl -f http://localhost:8080/healthz || exit 1
          curl -f http://localhost:8080/readyz || exit 1
          curl -f http://localhost:8080/metrics || exit 1
          curl -f http://localhost:8080/environment || exit 1

          echo "✅ All endpoint tests passed"

          # Cleanup
          docker stop functions-test
          docker rm functions-test

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        working-directory: functions
        run: |
          docker build -t functions-microservice:scan .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'functions-microservice:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint-and-test, docker-build, security-scan]
    if: always()

    steps:
      - name: Check job statuses
        run: |
          echo "## CI Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint and Test | ${{ needs.lint-and-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker-build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.lint-and-test.result }}" != "success" ] || \
             [ "${{ needs.docker-build.result }}" != "success" ] || \
             [ "${{ needs.security-scan.result }}" != "success" ]; then
            echo "❌ CI checks failed"
            exit 1
          else
            echo "✅ All CI checks passed"
          fi
