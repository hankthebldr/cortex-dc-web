name: Functions CD

on:
  push:
    branches:
      - main
    paths:
      - 'functions/**'
      - '.github/workflows/functions-cd.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - staging
          - production
        default: staging

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '8'
  GCP_PROJECT_ID: cortex-dc-project
  GCR_REGISTRY: gcr.io
  IMAGE_NAME: functions-microservice
  K8S_NAMESPACE: cortex-dc

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        working-directory: functions
        run: pnpm install --frozen-lockfile

      - name: Build TypeScript
        working-directory: functions
        run: pnpm run build

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker ${{ env.GCR_REGISTRY }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GCR_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./functions
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.repository.updated_at }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.meta.outputs.tags }}
          format: cyclonedx-json
          output-file: sbom.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json
          retention-days: 90

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    environment:
      name: staging
      url: https://staging-functions.cortex-dc.com
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: cortex-dc-cluster-staging
          location: us-central1

      - name: Update deployment image
        working-directory: functions/k8s
        run: |
          kubectl set image deployment/functions-microservice \
            functions=${{ needs.build-and-push.outputs.image-tag }} \
            -n ${{ env.K8S_NAMESPACE }}

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/functions-microservice \
            -n ${{ env.K8S_NAMESPACE }} \
            --timeout=5m

      - name: Verify deployment
        run: |
          # Get pod status
          kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=functions

          # Test health endpoint
          POD_NAME=$(kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=functions -o jsonpath='{.items[0].metadata.name}')
          kubectl exec -n ${{ env.K8S_NAMESPACE }} $POD_NAME -- \
            curl -f http://localhost:8080/health || exit 1

          echo "‚úÖ Deployment verified successfully"

      - name: Run smoke tests
        run: |
          # Port forward to test
          kubectl port-forward -n ${{ env.K8S_NAMESPACE }} \
            svc/functions-service 8080:80 &
          PF_PID=$!

          sleep 5

          # Test endpoints
          curl -f http://localhost:8080/health || exit 1
          curl -f http://localhost:8080/healthz || exit 1
          curl -f http://localhost:8080/readyz || exit 1
          curl -f http://localhost:8080/environment || exit 1

          kill $PF_PID
          echo "‚úÖ Smoke tests passed"

      - name: Post deployment summary
        run: |
          echo "## Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ needs.build-and-push.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Digest**: ${{ needs.build-and-push.outputs.image-digest }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Namespace**: ${{ env.K8S_NAMESPACE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Time**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=functions >> $GITHUB_STEP_SUMMARY

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    environment:
      name: production
      url: https://functions.cortex-dc.com
    if: github.ref == 'refs/heads/main' && github.event.inputs.environment == 'production'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_PROD }}

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: cortex-dc-cluster-prod
          location: us-central1

      - name: Create deployment backup
        run: |
          kubectl get deployment functions-microservice \
            -n ${{ env.K8S_NAMESPACE }} \
            -o yaml > deployment-backup.yaml

      - name: Upload backup
        uses: actions/upload-artifact@v4
        with:
          name: deployment-backup-${{ github.sha }}
          path: deployment-backup.yaml
          retention-days: 30

      - name: Update deployment image
        working-directory: functions/k8s
        run: |
          kubectl set image deployment/functions-microservice \
            functions=${{ needs.build-and-push.outputs.image-tag }} \
            -n ${{ env.K8S_NAMESPACE }}

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/functions-microservice \
            -n ${{ env.K8S_NAMESPACE }} \
            --timeout=10m

      - name: Verify deployment
        run: |
          kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=functions

          POD_NAME=$(kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=functions -o jsonpath='{.items[0].metadata.name}')
          kubectl exec -n ${{ env.K8S_NAMESPACE }} $POD_NAME -- \
            curl -f http://localhost:8080/health || exit 1

          echo "‚úÖ Production deployment verified"

      - name: Run production smoke tests
        run: |
          kubectl port-forward -n ${{ env.K8S_NAMESPACE }} \
            svc/functions-service 8080:80 &
          PF_PID=$!

          sleep 5

          curl -f http://localhost:8080/health || exit 1
          curl -f http://localhost:8080/healthz || exit 1
          curl -f http://localhost:8080/readyz || exit 1

          kill $PF_PID
          echo "‚úÖ Production smoke tests passed"

      - name: Post deployment summary
        run: |
          echo "## üöÄ Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ needs.build-and-push.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Digest**: ${{ needs.build-and-push.outputs.image-digest }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Namespace**: ${{ env.K8S_NAMESPACE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Time**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=functions >> $GITHUB_STEP_SUMMARY

      - name: Notify deployment
        if: success()
        run: |
          echo "‚úÖ Production deployment completed successfully"
          # Add Slack/email notification here if needed

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    needs: [deploy-staging, deploy-production]

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: cortex-dc-cluster
          location: us-central1

      - name: Rollback deployment
        run: |
          kubectl rollout undo deployment/functions-microservice \
            -n ${{ env.K8S_NAMESPACE }}

          kubectl rollout status deployment/functions-microservice \
            -n ${{ env.K8S_NAMESPACE }} \
            --timeout=5m

          echo "‚ö†Ô∏è Deployment rolled back to previous version"
