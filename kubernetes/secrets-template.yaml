# Secrets Template for Cortex DC Platform
# DO NOT commit actual secrets to version control
# This is a template showing the required secret keys

# To create secrets:
# kubectl create secret generic cortex-secrets \
#   --from-literal=postgres-password='YOUR_PASSWORD' \
#   --from-literal=postgres-username='cortex' \
#   --from-literal=redis-password='YOUR_REDIS_PASSWORD' \
#   --from-literal=minio-root-user='minioadmin' \
#   --from-literal=minio-root-password='YOUR_MINIO_PASSWORD' \
#   --from-literal=keycloak-admin-username='admin' \
#   --from-literal=keycloak-admin-password='YOUR_KEYCLOAK_PASSWORD' \
#   --namespace=cortex-dc

# Or use this template (replace values):
apiVersion: v1
kind: Secret
metadata:
  name: cortex-secrets
  namespace: cortex-dc
type: Opaque
stringData:
  # PostgreSQL
  postgres-username: "cortex"
  postgres-password: "CHANGE_ME"  # Use strong password

  # Redis
  redis-password: "CHANGE_ME"  # Use strong password

  # MinIO
  minio-root-user: "minioadmin"
  minio-root-password: "CHANGE_ME"  # Use strong password

  # Keycloak
  keycloak-admin-username: "admin"
  keycloak-admin-password: "CHANGE_ME"  # Use strong password
  keycloak-client-secret: "CHANGE_ME"  # Generate from Keycloak

  # Firebase/GCP (if using Firebase mode)
  # gcp-project-id: "cortex-dc-project"
  # firebase-project-id: "cortex-dc-portal"
  # firebase-database-url: "https://cortex-dc-portal.firebaseio.com"
  # genai-api-key: "YOUR_GENAI_API_KEY"

---
# GCP Service Account Secret (if using GKE/Firebase)
apiVersion: v1
kind: Secret
metadata:
  name: functions-gcp-credentials
  namespace: cortex-dc
type: Opaque
stringData:
  key.json: |
    {
      "type": "service_account",
      "project_id": "YOUR_PROJECT_ID",
      "private_key_id": "YOUR_KEY_ID",
      "private_key": "YOUR_PRIVATE_KEY",
      "client_email": "YOUR_SERVICE_ACCOUNT@YOUR_PROJECT.iam.gserviceaccount.com",
      "client_id": "YOUR_CLIENT_ID",
      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
      "token_uri": "https://oauth2.googleapis.com/token",
      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
      "client_x509_cert_url": "YOUR_CERT_URL"
    }
